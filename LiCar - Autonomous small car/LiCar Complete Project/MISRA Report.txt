Description	Resource	Path	Location	Type
#121-D return value type does not match the function type	DC_motor.c	/LiCar/HAL/DC_motor	line 295	C/C++ Problem
#1376-D (MISRA-C:2004 1.1/R) Ensure strict ANSI C mode (-ps) is enabled	.ccsproject	/LiCar	line 42, external location: C:\ti\ccsv7\tools\compiler\ti-cgt-arm_16.9.4.LTS\include\stdint.h	C/C++ Problem
#1377-D (MISRA-C:2004 2.1/R) Assembly language shall be encapsulated and isolated (function "ResetISR")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 238	C/C++ Problem
#1383-D (MISRA-C:2004 8.1/R) Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call	DC_motor.c	/LiCar/HAL/DC_motor	line 243	C/C++ Problem
#1383-D (MISRA-C:2004 8.1/R) Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call	DC_motor.c	/LiCar/HAL/DC_motor	line 255	C/C++ Problem
#1383-D (MISRA-C:2004 8.1/R) Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call	DC_motor.c	/LiCar/HAL/DC_motor	line 373	C/C++ Problem
#1383-D (MISRA-C:2004 8.1/R) Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 80	C/C++ Problem
#1383-D (MISRA-C:2004 8.1/R) Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 103	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 34	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 35	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 37	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 38	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 39	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 41	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 42	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 43	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 47	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 48	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 50	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 51	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 52	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 54	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 55	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 56	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 60	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 61	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 63	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 64	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 65	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 67	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 68	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 69	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 73	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 74	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 76	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 77	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 78	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 80	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 81	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 82	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 86	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 87	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 89	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 90	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 91	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 93	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 94	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 95	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 99	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 100	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 102	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 103	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 104	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 106	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 107	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 108	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 112	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 113	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 115	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 116	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 117	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 119	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 120	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 121	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 125	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 126	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 128	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 129	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 130	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 132	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 133	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 134	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 138	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 139	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 141	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 142	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 143	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 145	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 146	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 147	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 151	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 152	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 154	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 155	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 156	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 158	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 159	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 160	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 164	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 165	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 167	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 168	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 169	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 171	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 172	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 173	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 177	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 178	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 180	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 181	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 178	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 177	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 176	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 180	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 173	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 172	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 171	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 181	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 169	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 168	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 167	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 165	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 182	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 164	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 163	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 160	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 159	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 184	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 158	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 156	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 155	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 154	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 185	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 152	C/C++ Problem
#1496-D (MISRA-C:2004 5.6/A) No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure member and union member names ("ui32Flags")	.ccsproject	/LiCar	line 457, external location: C:\ti\TivaWare_C_Series-2.2.0.295\driverlib\lcd.h	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 186	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 184	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 182	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 181	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 186	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 177	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("pin_num")	DC_motor.c	/LiCar/HAL/DC_motor	line 197	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 176	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 203	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 173	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 171	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 169	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 204	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 168	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 164	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 163	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 160	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 209	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 158	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 156	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 155	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 210	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 151	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "ui32RGBColor" is used as an operand of # or ##.	.ccsproject	/LiCar	line 68, external location: C:\ti\TivaWare_C_Series-2.2.0.295\driverlib\lcd.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/LiCar	line 84, external location: C:\ti\TivaWare_C_Series-2.2.0.295\driverlib\lcd.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/LiCar	line 68, external location: C:\ti\TivaWare_C_Series-2.2.0.295\driverlib\lcd.h	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 215	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/LiCar	line 204, external location: C:\ti\ccsv7\tools\compiler\ti-cgt-arm_16.9.4.LTS\include\stdint.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/LiCar	line 203, external location: C:\ti\ccsv7\tools\compiler\ti-cgt-arm_16.9.4.LTS\include\stdint.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/LiCar	line 199, external location: C:\ti\ccsv7\tools\compiler\ti-cgt-arm_16.9.4.LTS\include\stdint.h	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 216	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/LiCar	line 198, external location: C:\ti\ccsv7\tools\compiler\ti-cgt-arm_16.9.4.LTS\include\stdint.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/LiCar	line 195, external location: C:\ti\ccsv7\tools\compiler\ti-cgt-arm_16.9.4.LTS\include\stdint.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/LiCar	line 194, external location: C:\ti\ccsv7\tools\compiler\ti-cgt-arm_16.9.4.LTS\include\stdint.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/LiCar	line 193, external location: C:\ti\ccsv7\tools\compiler\ti-cgt-arm_16.9.4.LTS\include\stdint.h	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 221	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/LiCar	line 192, external location: C:\ti\ccsv7\tools\compiler\ti-cgt-arm_16.9.4.LTS\include\stdint.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/LiCar	line 191, external location: C:\ti\ccsv7\tools\compiler\ti-cgt-arm_16.9.4.LTS\include\stdint.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/LiCar	line 190, external location: C:\ti\ccsv7\tools\compiler\ti-cgt-arm_16.9.4.LTS\include\stdint.h	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 222	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/LiCar	line 100, external location: C:\ti\TivaWare_C_Series-2.2.0.295\driverlib\lcd.h	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 221	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 222	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 216	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 227	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 215	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 227	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 210	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 228	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 209	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 204	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 228	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 203	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 233	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 186	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 233	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 184	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 234	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 182	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 181	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 234	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 180	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 177	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 245	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 176	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 245	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 173	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 246	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 171	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 246	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 169	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 247	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 168	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 247	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 167	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 248	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 164	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 248	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 163	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 249	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 160	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 249	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 158	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 250	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 156	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 250	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 155	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 251	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 154	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 251	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 151	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 251	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 257	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 257	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 257	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 250	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 258	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 258	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 258	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 249	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 259	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 259	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 259	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 248	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 260	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 260	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 260	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 247	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 261	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 261	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 261	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 246	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 245	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 234	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 233	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 228	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 227	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 222	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 221	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	DC_motor.c	/LiCar/HAL/DC_motor	line 296	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 216	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 215	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DC_motor.c	/LiCar/HAL/DC_motor	line 298	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 210	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 209	C/C++ Problem
#1468-D (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function	DC_motor.c	/LiCar/HAL/DC_motor	line 295	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 332	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 332	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 204	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 203	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 186	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DC_motor.c	/LiCar/HAL/DC_motor	line 332	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 335	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 335	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 185	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 184	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 182	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DC_motor.c	/LiCar/HAL/DC_motor	line 335	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 338	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 338	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 181	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 180	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 178	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DC_motor.c	/LiCar/HAL/DC_motor	line 338	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 341	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 341	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 177	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 176	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 173	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DC_motor.c	/LiCar/HAL/DC_motor	line 341	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 344	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 344	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 172	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 171	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 169	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DC_motor.c	/LiCar/HAL/DC_motor	line 344	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 347	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 347	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 168	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 167	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 165	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DC_motor.c	/LiCar/HAL/DC_motor	line 347	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 350	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 350	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 164	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 163	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 160	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DC_motor.c	/LiCar/HAL/DC_motor	line 350	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 353	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 353	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 159	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 158	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 156	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DC_motor.c	/LiCar/HAL/DC_motor	line 353	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 356	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 356	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 155	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 154	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 152	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DC_motor.c	/LiCar/HAL/DC_motor	line 356	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 359	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 359	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 151	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DC_motor.c	/LiCar/HAL/DC_motor	line 176	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DC_motor.c	/LiCar/HAL/DC_motor	line 163	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DC_motor.c	/LiCar/HAL/DC_motor	line 359	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 362	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 362	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 359	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 356	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 362	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DC_motor.c	/LiCar/HAL/DC_motor	line 362	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 365	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 365	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 353	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 350	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 365	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DC_motor.c	/LiCar/HAL/DC_motor	line 365	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 347	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 344	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 341	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 338	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 381	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 381	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 335	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 332	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 383	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 383	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if it is not a conversion to a wider floating type	DC_motor.c	/LiCar/HAL/DC_motor	line 365	C/C++ Problem
#1470-D (MISRA-C:2004 14.9/R) An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement	DC_motor.c	/LiCar/HAL/DC_motor	line 375	C/C++ Problem
#1470-D (MISRA-C:2004 14.9/R) An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement	DC_motor.c	/LiCar/HAL/DC_motor	line 383	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 33	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 33	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 33	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 33	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DC_motor.c	/LiCar/HAL/DC_motor	line 33	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 34	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 34	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 34	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if it is not a conversion to a wider floating type	DC_motor.c	/LiCar/HAL/DC_motor	line 362	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 34	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 35	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 35	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if it is not a conversion to a wider floating type	DC_motor.c	/LiCar/HAL/DC_motor	line 359	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 37	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 37	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 37	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if it is not a conversion to a wider floating type	DC_motor.c	/LiCar/HAL/DC_motor	line 356	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 38	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 38	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 38	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if it is not a conversion to a wider floating type	DC_motor.c	/LiCar/HAL/DC_motor	line 353	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 38	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 39	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 39	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 39	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if it is not a conversion to a wider floating type	DC_motor.c	/LiCar/HAL/DC_motor	line 350	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 39	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 41	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 41	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 41	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if it is not a conversion to a wider floating type	DC_motor.c	/LiCar/HAL/DC_motor	line 347	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 41	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 42	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 42	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if it is not a conversion to a wider floating type	DC_motor.c	/LiCar/HAL/DC_motor	line 344	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 43	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 43	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 43	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if it is not a conversion to a wider floating type	DC_motor.c	/LiCar/HAL/DC_motor	line 341	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 43	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 46	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 46	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 46	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 46	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DC_motor.c	/LiCar/HAL/DC_motor	line 46	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 47	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 47	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 47	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if it is not a conversion to a wider floating type	DC_motor.c	/LiCar/HAL/DC_motor	line 338	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 47	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 48	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 48	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if it is not a conversion to a wider floating type	DC_motor.c	/LiCar/HAL/DC_motor	line 335	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 50	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 50	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 50	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if it is not a conversion to a wider floating type	DC_motor.c	/LiCar/HAL/DC_motor	line 332	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 51	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 51	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 51	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	DC_motor.c	/LiCar/HAL/DC_motor	line 301	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 51	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 52	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 52	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 52	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	DC_motor.c	/LiCar/HAL/DC_motor	line 300	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 52	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 54	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 54	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 54	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	DC_motor.c	/LiCar/HAL/DC_motor	line 298	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 54	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 55	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 55	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	DC_motor.c	/LiCar/HAL/DC_motor	line 288	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 56	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 56	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 56	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	DC_motor.c	/LiCar/HAL/DC_motor	line 287	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 56	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 59	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 59	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 59	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 59	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DC_motor.c	/LiCar/HAL/DC_motor	line 59	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 60	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 60	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 60	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	DC_motor.c	/LiCar/HAL/DC_motor	line 280	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 60	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 61	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 61	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	DC_motor.c	/LiCar/HAL/DC_motor	line 279	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 63	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 63	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 63	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	DC_motor.c	/LiCar/HAL/DC_motor	line 272	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 64	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 64	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 64	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	DC_motor.c	/LiCar/HAL/DC_motor	line 271	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 64	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 65	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 65	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 65	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 381	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 65	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 67	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 67	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 67	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 234	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 67	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 68	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 68	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 228	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 69	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 69	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 69	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 222	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 69	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 72	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 72	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 72	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 72	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DC_motor.c	/LiCar/HAL/DC_motor	line 72	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 73	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 73	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 73	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 216	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 73	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 74	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 74	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 210	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 76	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 76	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 76	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DC_motor.c	/LiCar/HAL/DC_motor	line 204	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 77	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 77	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 77	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 383	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 77	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 78	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 78	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 78	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 381	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 78	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 80	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 80	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 80	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 379	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 80	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 81	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 81	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 378	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 82	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 82	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 82	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 375	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 82	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 85	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 85	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 85	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 85	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DC_motor.c	/LiCar/HAL/DC_motor	line 85	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 86	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 86	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 86	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 365	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 86	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 87	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 87	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 362	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 89	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 89	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 89	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 359	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 90	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 90	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 90	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 356	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 90	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 91	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 91	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 91	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 353	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 91	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 93	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 93	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 93	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 350	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 93	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 94	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 94	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 347	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 95	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 95	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 95	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 344	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 95	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 98	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 98	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 98	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 98	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DC_motor.c	/LiCar/HAL/DC_motor	line 98	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 99	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 99	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 99	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 341	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 99	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 100	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 100	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 338	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 102	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 102	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 102	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 335	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 103	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 103	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 103	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 332	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 103	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 104	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 104	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 104	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 298	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 104	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 106	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 106	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 106	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 261	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 106	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 107	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 107	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 260	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 108	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 108	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 108	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 259	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 108	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 111	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 111	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 111	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 111	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DC_motor.c	/LiCar/HAL/DC_motor	line 111	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 112	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 112	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 112	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 258	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 112	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 113	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 113	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 257	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 115	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 115	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 115	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 251	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 116	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 116	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 116	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 250	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 116	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 117	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 117	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 117	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 249	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 117	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 119	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 119	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 119	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 248	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 119	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 120	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 120	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 247	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 121	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 121	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 121	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 246	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 121	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 124	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 124	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 124	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 124	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DC_motor.c	/LiCar/HAL/DC_motor	line 124	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 125	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 125	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 125	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 245	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 125	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 126	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 126	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 234	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 128	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 128	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 128	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 233	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 129	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 129	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 129	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 228	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 129	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 130	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 130	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 130	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 227	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 130	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 132	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 132	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 132	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 222	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 132	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 133	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 133	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 221	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 134	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 134	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 134	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 216	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 134	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 137	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 137	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 137	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 137	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DC_motor.c	/LiCar/HAL/DC_motor	line 137	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 138	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 138	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 138	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 215	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 138	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 139	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 139	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 210	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 141	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 141	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 141	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 209	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 142	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 142	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 142	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 204	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 142	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 143	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 143	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 143	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 203	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 143	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 145	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 145	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 145	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 197	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 145	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 146	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 146	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 196	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 147	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 147	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 147	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 186	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 147	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 150	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DC_motor.c	/LiCar/HAL/DC_motor	line 150	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	DC_motor.c	/LiCar/HAL/DC_motor	line 150	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	DC_motor.c	/LiCar/HAL/DC_motor	line 150	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DC_motor.c	/LiCar/HAL/DC_motor	line 150	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	DC_motor.c	/LiCar/HAL/DC_motor	line 151	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 185	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 85	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 85	C/C++ Problem
#190-D enumerated type mixed with another type	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 85	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 86	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 86	C/C++ Problem
#190-D enumerated type mixed with another type	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 86	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 87	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 87	C/C++ Problem
#190-D enumerated type mixed with another type	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 87	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 88	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 88	C/C++ Problem
#190-D enumerated type mixed with another type	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 88	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 90	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 92	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 93	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 93	C/C++ Problem
#190-D enumerated type mixed with another type	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 93	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 94	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 94	C/C++ Problem
#190-D enumerated type mixed with another type	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 94	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 95	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 95	C/C++ Problem
#190-D enumerated type mixed with another type	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 95	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 96	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 96	C/C++ Problem
#190-D enumerated type mixed with another type	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 96	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 98	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 100	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 184	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 107	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 107	C/C++ Problem
#190-D enumerated type mixed with another type	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 107	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 108	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 108	C/C++ Problem
#190-D enumerated type mixed with another type	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 108	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 109	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 109	C/C++ Problem
#190-D enumerated type mixed with another type	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 109	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 110	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 110	C/C++ Problem
#190-D enumerated type mixed with another type	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 110	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 112	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 114	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 115	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 115	C/C++ Problem
#190-D enumerated type mixed with another type	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 115	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 116	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 116	C/C++ Problem
#190-D enumerated type mixed with another type	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 116	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 117	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 117	C/C++ Problem
#190-D enumerated type mixed with another type	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 117	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 118	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 118	C/C++ Problem
#190-D enumerated type mixed with another type	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 118	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 120	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 122	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 134	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 135	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 136	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 137	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 138	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 139	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 140	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 141	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 142	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 143	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 162	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 162	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 164	C/C++ Problem
#1460-D (MISRA-C:2004 16.7/A) A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object ("str: const uint8_t *")	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 167	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("i")	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 171	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 171	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 186	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 186	C/C++ Problem
#1484-D (MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 186	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 190	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 192	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 200	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("i")	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 200	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 203	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 209	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 209	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 209	C/C++ Problem
#1484-D (MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 209	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 217	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 222	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 224	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 224	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 226	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 228	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 228	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 226	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 236	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 236	C/C++ Problem
#1484-D (MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 236	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 237	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 237	C/C++ Problem
#1484-D (MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 237	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 238	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 238	C/C++ Problem
#1484-D (MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 238	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 239	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 239	C/C++ Problem
#1484-D (MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 239	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 244	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 244	C/C++ Problem
#1484-D (MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 244	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 245	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 245	C/C++ Problem
#1484-D (MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 245	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 246	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 246	C/C++ Problem
#1484-D (MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 246	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 252	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 252	C/C++ Problem
#1484-D (MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 252	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 253	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 253	C/C++ Problem
#1484-D (MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	LCD_Driver.c	/LiCar/HAL/LCD_Driver	line 253	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Sensor.c	/LiCar/HAL/Sensors	line 13	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Sensor.c	/LiCar/HAL/Sensors	line 15	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 17	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Sensor.c	/LiCar/HAL/Sensors	line 19	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 19	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Sensor.c	/LiCar/HAL/Sensors	line 21	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 23	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Sensor.c	/LiCar/HAL/Sensors	line 25	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 25	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 27	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 29	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 38	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 41	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 44	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 47	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if it is not a conversion to a wider floating type	Sensor.c	/LiCar/HAL/Sensors	line 52	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Sensor.c	/LiCar/HAL/Sensors	line 52	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if the expression is complex	Sensor.c	/LiCar/HAL/Sensors	line 52	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Sensor.c	/LiCar/HAL/Sensors	line 41	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Sensor.c	/LiCar/HAL/Sensors	line 62	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 62	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Sensor.c	/LiCar/HAL/Sensors	line 63	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Sensor.c	/LiCar/HAL/Sensors	line 72	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Sensor.c	/LiCar/HAL/Sensors	line 74	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 76	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 78	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Sensor.c	/LiCar/HAL/Sensors	line 83	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 83	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 85	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 87	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 92	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 95	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 99	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 101	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Sensor.c	/LiCar/HAL/Sensors	line 107	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 107	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Sensor.c	/LiCar/HAL/Sensors	line 108	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Sensor.c	/LiCar/HAL/Sensors	line 117	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Sensor.c	/LiCar/HAL/Sensors	line 119	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 121	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 123	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Sensor.c	/LiCar/HAL/Sensors	line 128	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 128	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 130	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 132	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 137	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 140	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 144	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Sensor.c	/LiCar/HAL/Sensors	line 146	C/C++ Problem
#1420-D (MISRA-C:2004 16.5/R) Functions with no parameters shall be declared and defined with the parameter list void	Sensor.h	/LiCar/HAL/Sensors	line 30	C/C++ Problem
#1420-D (MISRA-C:2004 16.5/R) Functions with no parameters shall be declared and defined with the parameter list void	Sensor.h	/LiCar/HAL/Sensors	line 29	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("pin")	ultraSonic.c	/LiCar/HAL/ultraSonic	line 47	C/C++ Problem
#190-D enumerated type mixed with another type	ultraSonic.c	/LiCar/HAL/ultraSonic	line 49	C/C++ Problem
#190-D enumerated type mixed with another type	ultraSonic.c	/LiCar/HAL/ultraSonic	line 50	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ultraSonic.c	/LiCar/HAL/ultraSonic	line 71	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ultraSonic.c	/LiCar/HAL/ultraSonic	line 72	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	ultraSonic.c	/LiCar/HAL/ultraSonic	line 76	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	ultraSonic.c	/LiCar/HAL/ultraSonic	line 78	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ultraSonic.c	/LiCar/HAL/ultraSonic	line 82	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	ultraSonic.c	/LiCar/HAL/ultraSonic	line 82	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 20	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 20	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 20	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 20	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 20	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 23	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 23	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 23	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 23	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 23	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 26	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 26	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 26	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 26	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 26	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 29	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 29	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 29	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 29	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 29	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 32	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 32	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 32	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 32	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 32	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 35	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 35	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 35	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 35	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 35	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 49	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 49	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 49	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 52	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 52	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 52	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 55	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 55	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 55	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 58	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 58	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 58	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 61	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 61	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 61	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 64	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 64	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 64	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 78	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 78	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 78	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 78	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 78	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 81	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 81	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 81	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 81	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 81	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 84	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 84	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 84	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 84	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 84	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 87	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 87	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 87	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 87	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 87	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 90	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 90	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 90	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 90	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 90	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 93	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 93	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 93	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 93	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 93	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 107	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 110	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 110	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 110	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 110	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 110	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 113	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 113	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 113	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 113	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 113	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 116	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 116	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 116	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 116	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 116	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 119	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 119	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 119	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 119	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 119	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 122	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 122	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 122	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 122	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 122	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 125	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 125	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 125	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 125	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 125	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 143	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 143	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 143	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 143	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 144	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 144	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 144	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 144	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 145	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 145	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 145	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 146	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 146	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 146	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 149	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 149	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 149	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 149	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 150	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 150	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 150	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 150	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 151	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 151	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 151	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 152	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 152	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 152	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 155	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 155	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 155	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 155	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 156	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 156	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 156	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 156	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 157	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 157	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 157	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 158	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 158	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 158	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 161	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 161	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 161	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 161	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 162	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 162	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 162	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 162	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 163	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 163	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 163	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 164	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 164	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 164	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 167	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 167	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 167	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 167	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 168	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 168	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 168	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 168	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 169	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 169	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 169	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 170	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 170	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 170	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 173	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 173	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 173	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 173	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 174	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 174	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 174	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 174	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 175	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 175	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 175	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 176	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 176	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 176	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 144	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 150	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 156	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 162	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 168	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 174	C/C++ Problem
#1473-D (MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 188	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("Port")	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 190	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 190	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("pin_num")	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 191	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 191	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 198	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 198	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 198	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 198	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 198	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 198	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 199	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 199	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 199	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 199	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 199	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 199	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 202	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 202	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 202	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 202	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 202	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 202	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 203	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 203	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 203	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 203	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 203	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 203	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 206	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 206	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 206	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 206	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 206	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 206	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 207	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 207	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 207	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 207	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 207	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 207	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 210	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 210	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 210	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 210	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 210	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 210	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 211	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 211	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 211	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 211	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 211	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 211	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 214	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 214	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 214	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 214	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 214	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 214	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 215	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 215	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 215	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 215	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 215	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 215	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 218	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 218	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 218	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 218	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 218	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 218	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 219	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 219	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 219	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 219	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 219	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 219	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 227	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 227	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 227	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 227	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 227	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 227	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 228	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 228	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 228	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 228	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 228	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 228	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 231	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 231	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 231	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 231	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 231	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 231	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 232	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 232	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 232	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 232	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 232	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 232	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 235	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 235	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 235	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 235	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 235	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 235	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 236	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 236	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 236	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 236	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 236	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 236	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 239	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 239	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 239	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 239	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 239	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 239	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 240	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 240	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 240	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 240	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 240	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 240	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 243	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 243	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 243	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 243	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 243	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 243	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 244	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 244	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 244	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 244	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 244	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 244	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 247	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 247	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 247	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 247	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 247	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 247	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 248	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 248	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 248	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 248	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 248	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 248	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 256	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 256	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 256	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 256	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 256	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 256	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 257	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 257	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 257	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 257	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 257	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 257	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 258	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 258	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 258	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 258	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 258	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 258	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 261	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 261	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 261	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 261	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 261	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 261	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 262	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 262	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 262	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 262	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 262	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 262	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 263	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 263	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 263	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 263	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 263	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 263	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 266	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 266	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 266	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 266	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 266	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 266	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 267	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 267	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 267	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 267	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 267	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 267	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 268	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 268	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 268	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 268	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 268	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 268	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 271	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 271	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 271	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 271	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 271	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 271	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 272	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 272	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 272	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 272	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 272	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 272	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 273	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 273	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 273	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 273	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 273	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 273	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 276	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 276	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 276	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 276	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 276	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 276	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 277	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 277	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 277	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 277	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 277	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 277	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 278	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 278	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 278	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 278	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 278	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 278	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 281	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 281	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 281	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 281	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 281	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 281	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 282	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 282	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 282	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 282	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 282	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 282	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 283	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 283	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 283	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 283	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 283	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 283	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 195	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 224	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 253	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 192	C/C++ Problem
#1473-D (MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 294	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("Port")	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 296	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 296	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("pin_num")	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 297	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 297	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 301	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 301	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 301	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 301	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 301	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 301	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 304	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 304	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 304	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 304	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 304	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 304	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 307	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 307	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 307	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 307	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 307	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 307	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 310	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 310	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 310	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 310	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 310	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 310	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 313	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 313	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 313	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 313	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 313	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 313	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 316	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 316	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 316	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 316	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 316	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 316	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 298	C/C++ Problem
#1473-D (MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 326	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("Port")	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 328	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 328	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("pin_num")	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 329	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 329	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 333	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 333	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 333	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 333	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 333	C/C++ Problem
#190-D enumerated type mixed with another type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 333	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 334	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 336	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 336	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 336	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 336	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 336	C/C++ Problem
#190-D enumerated type mixed with another type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 336	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 337	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 339	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 339	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 339	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 339	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 339	C/C++ Problem
#190-D enumerated type mixed with another type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 339	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 340	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 342	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 342	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 342	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 342	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 342	C/C++ Problem
#190-D enumerated type mixed with another type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 342	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 343	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 345	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 345	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 345	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 345	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 345	C/C++ Problem
#190-D enumerated type mixed with another type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 345	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 346	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 348	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 348	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 348	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 348	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 348	C/C++ Problem
#190-D enumerated type mixed with another type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 348	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 349	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 351	C/C++ Problem
#190-D enumerated type mixed with another type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 351	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 352	C/C++ Problem
#1468-D (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 333	C/C++ Problem
#1473-D (MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 359	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("Port")	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 361	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 361	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("pin_num")	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 362	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 362	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 367	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 367	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 367	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 367	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 370	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 370	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 370	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 370	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 373	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 373	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 373	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 373	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 376	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 376	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 376	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 376	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 379	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 379	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 379	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 379	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 382	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 382	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 382	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 382	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 364	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 398	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 398	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 401	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 401	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 404	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 404	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 407	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 407	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 410	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 410	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 413	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 413	C/C++ Problem
#1473-D (MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 435	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("Port")	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 437	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 437	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("pin_num")	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 438	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 438	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 442	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 442	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 442	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 442	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 442	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 442	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 443	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 443	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 443	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 443	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 443	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 443	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 444	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 444	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 444	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 444	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 444	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 444	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 446	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 446	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 446	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 446	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 446	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 446	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 448	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 448	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 448	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 448	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 448	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 448	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 449	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 449	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 449	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 449	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 449	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 449	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 452	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 452	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 452	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 452	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 452	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 452	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 453	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 453	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 453	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 453	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 453	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 453	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 454	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 454	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 454	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 454	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 454	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 454	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 456	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 456	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 456	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 456	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 456	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 456	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 458	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 458	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 458	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 458	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 458	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 458	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 459	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 459	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 459	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 459	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 459	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 459	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 462	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 462	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 462	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 462	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 462	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 462	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 463	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 463	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 463	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 463	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 463	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 463	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 464	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 464	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 464	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 464	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 464	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 464	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 466	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 466	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 466	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 466	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 466	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 466	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 468	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 468	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 468	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 468	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 468	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 468	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 469	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 469	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 469	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 469	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 469	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 469	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 472	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 472	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 472	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 472	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 472	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 472	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 473	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 473	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 473	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 473	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 473	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 473	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 474	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 474	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 474	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 474	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 474	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 474	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 476	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 476	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 476	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 476	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 476	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 476	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 478	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 478	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 478	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 478	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 478	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 478	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 479	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 479	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 479	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 479	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 479	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 479	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 482	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 482	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 482	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 482	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 482	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 482	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 483	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 483	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 483	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 483	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 483	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 483	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 484	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 484	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 484	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 484	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 484	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 484	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 486	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 486	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 486	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 486	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 486	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 486	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 488	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 488	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 488	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 488	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 488	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 488	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 489	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 489	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 489	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 489	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 489	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 489	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 492	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 492	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 492	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 492	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 492	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 492	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 493	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 493	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 493	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 493	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 493	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 493	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 494	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 494	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 494	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 494	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 494	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 494	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 496	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 496	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 496	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 496	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 496	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 496	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 498	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 498	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 498	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 498	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 498	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 498	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 499	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 499	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 499	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 499	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 499	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 499	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 439	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 511	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 512	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 513	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 517	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("i")	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 517	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("j")	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 517	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 518	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_DIO.c	/LiCar/MCAL/Tiva_DIO	line 519	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	bitwseOperations.h	/LiCar/MCAL/Tiva_DIO	line 12	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	bitwseOperations.h	/LiCar/MCAL/Tiva_DIO	line 13	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	bitwseOperations.h	/LiCar/MCAL/Tiva_DIO	line 14	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	bitwseOperations.h	/LiCar/MCAL/Tiva_DIO	line 15	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	bitwseOperations.h	/LiCar/MCAL/Tiva_DIO	line 16	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	bitwseOperations.h	/LiCar/MCAL/Tiva_DIO	line 17	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 141	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 141	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 141	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 141	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 144	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 144	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 144	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 144	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 144	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 157	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 157	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 157	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 157	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 157	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 164	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 164	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 164	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 164	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 164	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 165	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 165	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 165	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 165	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 165	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 166	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 166	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 166	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 166	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 166	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 166	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 167	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 167	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 167	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 167	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 167	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 167	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 168	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 168	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 168	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 168	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 168	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 168	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 169	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 169	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 169	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 169	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 169	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 169	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 174	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 174	C/C++ Problem
#1395-D (MISRA-C:2004 10.3/R) The value of a complex expression of integer type shall only be cast to a type of the same signedness that is no wider than the underlying type of the expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 174	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 177	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 177	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 177	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 177	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 177	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 184	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 184	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 184	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 184	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 184	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 185	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 185	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 185	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 185	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 185	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 186	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 186	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 186	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 186	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 186	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 186	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 187	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 187	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 187	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 187	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 187	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 187	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 188	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 188	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 188	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 188	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 188	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 188	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 189	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 189	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 189	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 189	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 189	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 189	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 194	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 194	C/C++ Problem
#1395-D (MISRA-C:2004 10.3/R) The value of a complex expression of integer type shall only be cast to a type of the same signedness that is no wider than the underlying type of the expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 194	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 197	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 197	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 197	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 197	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 197	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 204	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 204	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 204	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 204	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 204	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 205	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 205	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 205	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 205	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 205	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 206	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 206	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 206	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 206	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 206	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 206	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 207	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 207	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 207	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 207	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 207	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 207	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 208	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 208	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 208	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 208	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 208	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 208	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 209	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 209	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 209	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 209	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 209	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 209	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 214	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 214	C/C++ Problem
#1395-D (MISRA-C:2004 10.3/R) The value of a complex expression of integer type shall only be cast to a type of the same signedness that is no wider than the underlying type of the expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 214	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 217	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 217	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 217	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 217	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 217	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 224	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 224	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 224	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 224	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 224	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 225	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 225	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 225	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 225	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 225	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 226	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 226	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 226	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 226	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 226	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 226	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 227	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 227	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 227	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 227	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 227	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 227	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 228	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 228	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 228	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 228	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 228	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 228	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 229	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 229	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 229	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 229	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 229	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 229	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 234	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 234	C/C++ Problem
#1395-D (MISRA-C:2004 10.3/R) The value of a complex expression of integer type shall only be cast to a type of the same signedness that is no wider than the underlying type of the expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 234	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 237	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 237	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 237	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 237	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 237	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 244	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 244	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 244	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 244	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 244	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 245	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 245	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 245	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 245	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 245	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 246	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 246	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 246	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 246	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 246	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 246	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 247	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 247	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 247	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 247	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 247	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 247	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 248	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 248	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 248	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 248	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 248	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 248	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 249	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 249	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 249	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 249	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 249	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 249	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 254	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 254	C/C++ Problem
#1395-D (MISRA-C:2004 10.3/R) The value of a complex expression of integer type shall only be cast to a type of the same signedness that is no wider than the underlying type of the expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 254	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 257	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 257	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 257	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 257	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 257	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 264	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 264	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 264	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 264	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 264	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 265	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 265	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 265	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 265	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 265	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 266	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 266	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 266	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 266	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 266	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 266	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 267	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 267	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 267	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 267	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 267	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 267	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 268	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 268	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 268	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 268	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 268	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 268	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 269	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 269	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 269	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 269	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 269	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 269	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 274	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 274	C/C++ Problem
#1395-D (MISRA-C:2004 10.3/R) The value of a complex expression of integer type shall only be cast to a type of the same signedness that is no wider than the underlying type of the expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 274	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 277	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 277	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 277	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 277	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 277	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 284	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 284	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 284	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 284	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 284	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 285	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 285	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 285	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 285	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 285	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 286	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 286	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 286	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 286	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 286	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 286	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 287	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 287	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 287	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 287	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 287	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 287	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 288	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 288	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 288	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 288	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 288	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 288	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 289	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 289	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 289	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 289	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 289	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 289	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 290	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 290	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 290	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 290	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 290	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 290	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 295	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 295	C/C++ Problem
#1395-D (MISRA-C:2004 10.3/R) The value of a complex expression of integer type shall only be cast to a type of the same signedness that is no wider than the underlying type of the expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 295	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 298	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 298	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 298	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 298	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 298	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 305	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 305	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 305	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 305	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 305	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 306	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 306	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 306	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 306	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 306	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 307	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 307	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 307	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 307	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 307	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 307	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 308	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 308	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 308	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 308	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 308	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 308	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 309	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 309	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 309	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 309	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 309	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 309	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 310	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 310	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 310	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 310	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 310	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 310	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 315	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 315	C/C++ Problem
#1395-D (MISRA-C:2004 10.3/R) The value of a complex expression of integer type shall only be cast to a type of the same signedness that is no wider than the underlying type of the expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 315	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 318	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 318	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 318	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 318	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 318	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 325	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 325	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 325	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 325	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 325	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 326	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 326	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 326	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 326	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 326	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 327	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 327	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 327	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 327	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 327	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 327	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 328	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 328	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 328	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 328	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 328	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 328	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 329	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 329	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 329	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 329	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 329	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 329	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 330	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 330	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 330	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 330	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 330	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 330	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 335	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 335	C/C++ Problem
#1395-D (MISRA-C:2004 10.3/R) The value of a complex expression of integer type shall only be cast to a type of the same signedness that is no wider than the underlying type of the expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 335	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 338	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 338	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 338	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 338	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 338	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 345	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 345	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 345	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 345	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 345	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 346	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 346	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 346	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 346	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 346	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 347	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 347	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 347	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 347	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 347	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 347	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 348	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 348	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 348	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 348	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 348	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 348	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 349	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 349	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 349	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 349	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 349	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 349	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 350	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 350	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 350	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 350	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 350	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 350	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 355	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 355	C/C++ Problem
#1395-D (MISRA-C:2004 10.3/R) The value of a complex expression of integer type shall only be cast to a type of the same signedness that is no wider than the underlying type of the expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 355	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 358	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 358	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 358	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 358	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 358	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 365	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 365	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 365	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 365	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 365	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 366	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 366	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 366	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 366	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 366	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 367	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 367	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 367	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 367	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 367	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 367	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 368	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 368	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 368	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 368	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 368	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 368	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 369	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 369	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 369	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 369	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 369	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 369	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 370	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 370	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 370	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 370	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 370	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 370	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 375	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 375	C/C++ Problem
#1395-D (MISRA-C:2004 10.3/R) The value of a complex expression of integer type shall only be cast to a type of the same signedness that is no wider than the underlying type of the expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 375	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 378	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 378	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 378	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 378	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 378	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 385	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 385	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 385	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 385	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 385	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 386	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 386	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 386	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 386	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 386	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 387	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 387	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 387	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 387	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 387	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 387	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 388	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 388	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 388	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 388	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 388	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 388	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 389	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 389	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 389	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 389	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 389	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 389	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 390	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 390	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 390	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 390	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 390	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 390	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 395	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 395	C/C++ Problem
#1395-D (MISRA-C:2004 10.3/R) The value of a complex expression of integer type shall only be cast to a type of the same signedness that is no wider than the underlying type of the expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 395	C/C++ Problem
#1460-D (MISRA-C:2004 16.7/A) A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object ("st_timer: const GPT_Struct *")	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 400	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 404	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 408	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 408	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 408	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 408	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 408	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 411	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 411	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 411	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 411	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 411	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 414	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 414	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 414	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 414	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 414	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 417	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 417	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 417	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 417	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 417	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 420	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 420	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 420	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 420	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 420	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 423	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 423	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 423	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 423	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 423	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 439	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 445	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 445	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 445	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 445	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 445	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 446	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 446	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 446	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 446	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 449	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 449	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 451	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 451	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 451	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 451	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 451	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 452	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 452	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 452	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 452	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 453	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 453	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 454	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 454	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 456	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 458	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 462	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 462	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 462	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 462	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 462	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 463	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 463	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 463	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 463	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 466	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 466	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 468	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 468	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 468	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 468	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 468	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 469	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 469	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 469	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 469	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 470	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 470	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 471	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 471	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 473	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 475	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 479	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 479	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 479	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 479	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 479	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 480	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 480	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 480	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 480	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 483	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 483	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 485	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 485	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 485	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 485	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 485	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 486	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 486	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 486	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 486	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 487	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 487	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 488	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 488	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 490	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 492	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 496	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 496	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 496	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 496	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 496	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 497	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 497	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 497	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 497	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 500	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 500	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 502	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 502	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 502	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 502	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 502	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 503	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 503	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 503	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 503	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 504	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 504	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 505	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 505	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 507	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 509	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 513	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 513	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 513	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 513	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 513	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 514	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 514	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 514	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 514	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 517	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 517	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 519	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 519	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 519	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 519	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 519	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 520	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 520	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 520	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 520	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 521	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 521	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 522	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 522	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 524	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 526	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 530	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 530	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 530	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 530	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 530	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 531	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 531	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 531	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 531	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 534	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 534	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 536	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 536	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 536	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 536	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 536	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 537	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 537	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 537	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 537	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 538	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 538	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 539	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 539	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 541	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 543	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 547	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 547	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 547	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 547	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 547	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 549	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 549	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 551	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 551	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 551	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 551	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 551	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 553	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 553	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 556	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 560	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 560	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 560	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 560	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 560	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 561	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 561	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 561	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 561	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 564	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 564	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 566	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 566	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 566	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 566	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 566	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 567	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 567	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 567	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 567	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 568	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 568	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 569	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 569	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 571	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 573	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 577	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 577	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 577	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 577	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 577	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 578	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 578	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 578	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 578	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 581	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 581	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 583	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 583	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 583	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 583	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 583	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 584	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 584	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 584	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 584	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 585	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 585	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 586	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 586	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 588	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 590	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 594	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 594	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 594	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 594	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 594	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 595	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 595	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 595	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 595	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 598	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 598	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 600	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 600	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 600	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 600	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 600	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 601	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 601	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 601	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 601	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 602	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 602	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 603	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 603	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 605	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 607	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 611	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 611	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 611	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 611	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 611	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 612	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 612	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 612	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 612	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 615	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 615	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 617	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 617	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 617	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 617	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 617	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 618	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 618	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 618	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 618	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 619	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 619	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 620	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 620	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 622	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 624	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 628	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 628	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 628	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 628	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 628	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 629	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 629	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 629	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 629	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 632	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 632	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 634	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 634	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 634	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 634	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 634	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 635	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 635	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 635	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 635	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 636	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 636	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 637	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 637	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 639	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 641	C/C++ Problem
#1421-D (MISRA-C:2004 16.8/R) All exit paths from a function with non-void return type shall have an explicit return statement with an expression (function "TimerACapture_PulseWidth")	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 646	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 446	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 452	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 463	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 469	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 480	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 486	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 497	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 503	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 514	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 520	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 531	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 537	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 548	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 552	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 561	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 567	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 578	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 584	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 595	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 601	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 612	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 618	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 629	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 635	C/C++ Problem
#1468-D (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 454	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 19	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 19	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 22	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 22	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 25	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 25	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 28	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 28	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 31	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 31	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 34	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 34	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 37	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 37	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 40	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 40	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 43	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 43	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 46	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 46	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 49	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 49	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 52	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 52	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 65	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 65	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 65	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 65	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 65	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 68	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 68	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 68	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 68	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 68	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 71	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 71	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 71	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 71	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 71	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 74	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 74	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 74	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 74	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 74	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 77	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 77	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 77	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 77	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 77	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 80	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 80	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 80	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 80	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 80	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 83	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 83	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 83	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 83	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 83	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 86	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 86	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 86	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 86	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 86	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 89	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 89	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 89	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 89	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 89	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 92	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 92	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 92	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 92	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 92	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 95	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 95	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 95	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 95	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 95	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 98	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 98	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 98	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 98	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 98	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 111	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 111	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 111	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 111	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 111	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 114	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 114	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 114	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 114	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 114	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 117	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 117	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 117	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 117	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 117	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 120	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 120	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 120	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 120	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 120	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 123	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 123	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 123	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 123	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 123	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 126	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 126	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 126	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 126	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 126	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 129	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 129	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 129	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 129	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 129	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 132	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 132	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 132	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 132	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 132	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 135	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 135	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 135	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 135	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 135	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 138	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 138	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 138	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 138	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 138	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Tiva_GPTimers.c	/LiCar/MCAL/Tiva_GPTimers	line 141	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/LiCar	line 91	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/LiCar	line 99	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/LiCar	line 102	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/LiCar	line 106	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/LiCar	line 107	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	main.c	/LiCar	line 108	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/LiCar	line 113	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/LiCar	line 118	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/LiCar	line 136	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/LiCar	line 138	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/LiCar	line 138	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/LiCar	line 140	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/LiCar	line 141	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/LiCar	line 143	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/LiCar	line 145	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/LiCar	line 42	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/LiCar	line 81	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("temp")	main.c	/LiCar	line 82	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/LiCar	line 82	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("left")	main.c	/LiCar	line 83	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/LiCar	line 83	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("right")	main.c	/LiCar	line 84	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/LiCar	line 84	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/LiCar	line 90	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 168	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 169	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 170	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 171	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 172	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 173	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 174	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 175	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 176	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 177	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 178	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 179	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 180	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 181	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 182	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 183	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 184	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 185	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 186	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 187	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 188	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 189	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 190	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 191	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 192	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 193	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 194	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 195	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 196	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 197	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 198	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 199	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 200	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 201	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 202	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 203	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 204	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 205	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 206	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 207	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 208	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 209	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 210	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 211	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 212	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 213	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 214	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 215	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 216	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 217	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 218	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 219	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 220	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 221	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 222	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 223	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 224	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DC_motor.c	/LiCar/HAL/DC_motor	line 182	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	tm4c123gh6pm_startup_ccs.c	/LiCar	line 69	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "ResetISR")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 71	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "NmiSR")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 72	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "FaultISR")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 73	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 74	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 75	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 76	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 77	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 78	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 79	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 80	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 81	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 82	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 83	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 84	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 85	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 86	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 87	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 88	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 89	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 90	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 91	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 92	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 93	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 94	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 95	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 96	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 97	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 98	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 99	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 100	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 101	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 102	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 103	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 104	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 105	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 106	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 107	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 108	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 109	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 110	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 111	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 112	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 113	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 114	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 115	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 116	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 117	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 118	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 119	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 120	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 121	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 122	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 123	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 124	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 125	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 126	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 127	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 128	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 129	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 130	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 131	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 132	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 133	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 134	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 135	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 136	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 137	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 138	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 139	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 140	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 141	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 142	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 143	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 144	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 145	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 146	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 147	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 148	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 149	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 150	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 151	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 152	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 153	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 154	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 155	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 156	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/LiCar	line 157	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 158	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 159	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 160	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 161	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 162	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 163	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 164	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 165	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 166	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/LiCar	line 167	C/C++ Problem
